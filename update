#!/usr/bin/env bash

set -u -o pipefail
# set -e # Do not exit if one command failed
# set -x # Only for debugging

update_system() {
    echo "[+] Updating system (rpm-ostree)..."
    rpm-ostree update
}

update_flatpaks() {
    echo "[+] Updating system Flatpaks..."
    flatpak --system update --assumeyes
    flatpak --system remove --unused --assumeyes
}

update_rust_crates() {
    # Use a fixed toolbox to avoid issues during a Fedora major version rebase
    local -r toolbox="toolbox"

    echo "[+] Updating Rust crates..."
    rustup update
    toolbox run --container "${toolbox}" ~/.cargo/bin/cargo install-update -a
    toolbox run --container "${toolbox}" ~/.cargo/bin/cargo cache -a
}

update_container_images() {
    echo "[+] Updating container images..."
    # Only update selected container images
    images=(
        'registry.fedoraproject.org/fedora:latest'
        'docker.io/antora/antora:latest'
        'quay.io/coreos-assembler/coreos-assembler:latest'
    )
    for img in "${images[@]}"; do
        if $(podman image exists "${img}"); then
            podman pull "${img}"
        fi
    done
    for img in $(podman images --filter dangling=true --format "{{.ID}}"); do
        podman rmi "${img}"
    done
    echo "[+] Done"
}

update_toolboxes() {
    echo "[+] Updating toolboxes..."
    # Only update toolbox images currently in use
    for img in $(podman images -n --format "{{.Repository}}" | grep "quay.io/travier/toolbox"); do
        podman pull "${img}"
        local name="${img%:*}"
        name="${name##*/}"
        toolbox rm --force "${name}" || true
        toolbox create --image "${img}" "${name}"
    done
    for img in $(podman images --filter dangling=true --format "{{.ID}}"); do
        podman rmi "${img}"
    done
}

update_sysexts() {
    echo "[+] Updating systemd system extensions..."
    if [[ -f "/run/.containerenv" ]]; then
        echo "[+] Can not (yet) update sysexts from a rootless container."
        return
    fi
    sudo /usr/lib/systemd/systemd-sysupdate update

}

update_firmwares() {
    echo "[+] Updating firmwares..."
    sudo fwupdmgr refresh
    sudo fwupdmgr update
    echo "[+] Done"
}

main() {
    local SYSTEM=false
    if [[ "${#}" -gt 0 ]]; then
        case "${1}" in
            "s"|"sys"|"system")
                SYSTEM=true
                ;;
        esac
        case "${1}" in
            "c"|"cont"|"container")
                update_container_images
                exit 0
                ;;
        esac
        case "${1}" in
            "f"|"firm"|"firmware")
                update_firmwares
                exit 0
                ;;
        esac
        case "${1}" in
            "t"|"tb"|"tbx"|"toolbox")
                update_toolboxes
                exit 0
                ;;
        esac
    fi

    if [[ "${SYSTEM}" == true ]]; then
        update_system
        update_flatpaks
    fi
    update_rust_crates
    update_container_images
    update_toolboxes
    update_sysexts

    echo "[+] Done"
}

main "${@}"
